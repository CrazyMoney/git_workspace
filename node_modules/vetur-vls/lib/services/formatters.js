(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "vscode-languageserver-types", "js-beautify", "../utils/strings", "./formatterOptions", "lodash"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var vscode_languageserver_types_1 = require("vscode-languageserver-types");
    var js_beautify_1 = require("js-beautify");
    var strings_1 = require("../utils/strings");
    var formatterOptions_1 = require("./formatterOptions");
    var _ = require("lodash");
    function htmlFormat(document, currRange, formattingOptions) {
        var _a = getValueAndRange(document, currRange), value = _a.value, range = _a.range;
        formatterOptions_1.defaultHtmlOptions.indent_with_tabs = !formattingOptions.insertSpaces;
        formatterOptions_1.defaultHtmlOptions.indent_size = formattingOptions.tabSize;
        var htmlFormattingOptions = formatterOptions_1.defaultHtmlOptions;
        if (formattingOptions.html) {
            htmlFormattingOptions = _.assign(formatterOptions_1.defaultHtmlOptions, formattingOptions.html);
        }
        var beautifiedHtml = js_beautify_1.html(value, htmlFormattingOptions);
        var initialIndent = generateIndent(1, formattingOptions);
        var indentedHtml = ('\n' + beautifiedHtml).replace(/\n/g, '\n' + initialIndent) + '\n';
        return [{
                range: range,
                newText: indentedHtml
            }];
    }
    exports.htmlFormat = htmlFormat;
    function cssFormat(document, currRange, formattingOptions) {
        var _a = getValueAndRange(document, currRange), value = _a.value, range = _a.range;
        formatterOptions_1.defaultCssOptions.indent_with_tabs = !formattingOptions.insertSpaces;
        formatterOptions_1.defaultCssOptions.indent_size = formattingOptions.tabSize;
        var cssFormattingOptions = formatterOptions_1.defaultCssOptions;
        if (formattingOptions.css) {
            cssFormattingOptions = _.assign(formatterOptions_1.defaultCssOptions, formattingOptions.css);
        }
        var beautifiedCss = js_beautify_1.css(value, cssFormattingOptions);
        if (formattingOptions.styleInitialIndent) {
            var initialIndent = generateIndent(1, formattingOptions);
            var indentedCss = ('\n' + beautifiedCss).replace(/\n/g, '\n' + initialIndent) + '\n';
            return [{
                    range: range,
                    newText: indentedCss
                }];
        }
        else {
            return [{
                    range: range,
                    newText: '\n' + beautifiedCss + '\n'
                }];
        }
    }
    exports.cssFormat = cssFormat;
    function getValueAndRange(document, currRange) {
        var value = document.getText();
        var range = currRange;
        var includesEnd = true;
        if (currRange) {
            var startOffset = document.offsetAt(currRange.start);
            var endOffset = document.offsetAt(currRange.end);
            includesEnd = endOffset === value.length;
            value = value.substring(startOffset, endOffset);
        }
        else {
            range = vscode_languageserver_types_1.Range.create(vscode_languageserver_types_1.Position.create(0, 0), document.positionAt(value.length));
        }
        return { value: value, range: range };
    }
    function generateIndent(level, options) {
        if (options.insertSpaces) {
            return strings_1.repeat(' ', level * options.tabSize);
        }
        else {
            return strings_1.repeat('\t', level);
        }
    }
});
//# sourceMappingURL=formatters.js.map